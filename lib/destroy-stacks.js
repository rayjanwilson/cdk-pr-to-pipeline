#!/usr/bin/env npx ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const destroy = async (stack) => {
    return new Promise(resolve => {
        console.log(`i am destroying ${stack}`);
        child_process_1.exec(`npx cdk destroy ${stack} --force`, (error, stdout, stderr) => {
            // 'npx cdk list'
            console.log(`destroyed ${stack}`);
            resolve(stdout);
        });
    });
};
const launch_all_destroys = async (stack_array) => {
    const promises = stack_array.map((stack) => destroy(stack));
    try {
        return await Promise.all(promises);
    }
    catch (error) {
        console.error(error);
        throw new Error(error);
    }
};
const outBuffer = child_process_1.execSync('npx cdk list', { encoding: 'utf8' });
const out = outBuffer.toString();
const stack_array = out.split('\n').filter(item => item !== '');
console.log(stack_array);
void launch_all_destroys(stack_array);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzdHJveS1zdGFja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXN0cm95LXN0YWNrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpREFBK0M7QUFFL0MsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBbUIsRUFBRTtJQUN2RCxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDeEMsb0JBQUksQ0FBQyxtQkFBbUIsS0FBSyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2pFLGlCQUFpQjtZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNsQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxFQUFFLFdBQXFCLEVBQUUsRUFBRTtJQUMxRCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNwRSxJQUFJO1FBQ0YsT0FBTyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDcEM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4QjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLHdCQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDakUsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBRWpDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFekIsS0FBSyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5weCB0cy1ub2RlXG5pbXBvcnQgeyBleGVjU3luYywgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5jb25zdCBkZXN0cm95ID0gYXN5bmMgKHN0YWNrOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgY29uc29sZS5sb2coYGkgYW0gZGVzdHJveWluZyAke3N0YWNrfWApO1xuICAgIGV4ZWMoYG5weCBjZGsgZGVzdHJveSAke3N0YWNrfSAtLWZvcmNlYCwgKGVycm9yLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgLy8gJ25weCBjZGsgbGlzdCdcbiAgICAgIGNvbnNvbGUubG9nKGBkZXN0cm95ZWQgJHtzdGFja31gKTtcbiAgICAgIHJlc29sdmUoc3Rkb3V0KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBsYXVuY2hfYWxsX2Rlc3Ryb3lzID0gYXN5bmMgKHN0YWNrX2FycmF5OiBzdHJpbmdbXSkgPT4ge1xuICBjb25zdCBwcm9taXNlcyA9IHN0YWNrX2FycmF5Lm1hcCgoc3RhY2s6IHN0cmluZykgPT4gZGVzdHJveShzdGFjaykpO1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufTtcblxuY29uc3Qgb3V0QnVmZmVyID0gZXhlY1N5bmMoJ25weCBjZGsgbGlzdCcsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbmNvbnN0IG91dCA9IG91dEJ1ZmZlci50b1N0cmluZygpO1xuXG5jb25zdCBzdGFja19hcnJheSA9IG91dC5zcGxpdCgnXFxuJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gJycpO1xuY29uc29sZS5sb2coc3RhY2tfYXJyYXkpO1xuXG52b2lkIGxhdW5jaF9hbGxfZGVzdHJveXMoc3RhY2tfYXJyYXkpO1xuIl19